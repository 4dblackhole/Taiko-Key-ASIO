#include "StringToVirtualKeyCode.h"

#define VKMAP_INSERT(x) vkMap.insert(std::make_pair(_T(#x), x))

StringToVirtualKeyCode::StringToVirtualKeyCode()
{
	VKMAP_INSERT(VK_LBUTTON);
	VKMAP_INSERT(VK_RBUTTON);
	VKMAP_INSERT(VK_CANCEL);
	VKMAP_INSERT(VK_MBUTTON);
	VKMAP_INSERT(VK_XBUTTON1);
	VKMAP_INSERT(VK_XBUTTON2);
	VKMAP_INSERT(VK_BACK);
	VKMAP_INSERT(VK_TAB);
	VKMAP_INSERT(VK_CLEAR);
	VKMAP_INSERT(VK_RETURN);
	VKMAP_INSERT(VK_SHIFT);
	VKMAP_INSERT(VK_CONTROL);
	VKMAP_INSERT(VK_MENU);
	VKMAP_INSERT(VK_PAUSE);
	VKMAP_INSERT(VK_CAPITAL);
	VKMAP_INSERT(VK_KANA);
	VKMAP_INSERT(VK_HANGEUL);
	VKMAP_INSERT(VK_HANGUL);
	VKMAP_INSERT(VK_IME_ON);
	VKMAP_INSERT(VK_JUNJA);
	VKMAP_INSERT(VK_FINAL);
	VKMAP_INSERT(VK_HANJA);
	VKMAP_INSERT(VK_KANJI);
	VKMAP_INSERT(VK_IME_OFF);
	VKMAP_INSERT(VK_ESCAPE);
	VKMAP_INSERT(VK_CONVERT);
	VKMAP_INSERT(VK_NONCONVERT);
	VKMAP_INSERT(VK_ACCEPT);
	VKMAP_INSERT(VK_MODECHANGE);
	VKMAP_INSERT(VK_SPACE);
	VKMAP_INSERT(VK_PRIOR);
	VKMAP_INSERT(VK_NEXT);
	VKMAP_INSERT(VK_END);
	VKMAP_INSERT(VK_HOME);
	VKMAP_INSERT(VK_LEFT);
	VKMAP_INSERT(VK_UP);
	VKMAP_INSERT(VK_RIGHT);
	VKMAP_INSERT(VK_DOWN);
	VKMAP_INSERT(VK_SELECT);
	VKMAP_INSERT(VK_PRINT);
	VKMAP_INSERT(VK_EXECUTE);
	VKMAP_INSERT(VK_SNAPSHOT);
	VKMAP_INSERT(VK_INSERT);
	VKMAP_INSERT(VK_DELETE);
	VKMAP_INSERT(VK_HELP);

	VKMAP_INSERT(VK_LWIN);
	VKMAP_INSERT(VK_RWIN);
	VKMAP_INSERT(VK_APPS);
	VKMAP_INSERT(VK_SLEEP);
	VKMAP_INSERT(VK_NUMPAD0);
	VKMAP_INSERT(VK_NUMPAD1);
	VKMAP_INSERT(VK_NUMPAD2);
	VKMAP_INSERT(VK_NUMPAD3);
	VKMAP_INSERT(VK_NUMPAD4);
	VKMAP_INSERT(VK_NUMPAD5);
	VKMAP_INSERT(VK_NUMPAD6);
	VKMAP_INSERT(VK_NUMPAD7);
	VKMAP_INSERT(VK_NUMPAD8);
	VKMAP_INSERT(VK_NUMPAD9);
	VKMAP_INSERT(VK_MULTIPLY);
	VKMAP_INSERT(VK_ADD);
	VKMAP_INSERT(VK_SEPARATOR);
	VKMAP_INSERT(VK_SUBTRACT);
	VKMAP_INSERT(VK_DECIMAL);
	VKMAP_INSERT(VK_DIVIDE);
	VKMAP_INSERT(VK_F1);
	VKMAP_INSERT(VK_F2);
	VKMAP_INSERT(VK_F3);
	VKMAP_INSERT(VK_F4);
	VKMAP_INSERT(VK_F5);
	VKMAP_INSERT(VK_F6);
	VKMAP_INSERT(VK_F7);
	VKMAP_INSERT(VK_F8);
	VKMAP_INSERT(VK_F9);
	VKMAP_INSERT(VK_F10);
	VKMAP_INSERT(VK_F11);
	VKMAP_INSERT(VK_F12);
	VKMAP_INSERT(VK_F13);
	VKMAP_INSERT(VK_F14);
	VKMAP_INSERT(VK_F15);
	VKMAP_INSERT(VK_F16);
	VKMAP_INSERT(VK_F17);
	VKMAP_INSERT(VK_F18);
	VKMAP_INSERT(VK_F19);
	VKMAP_INSERT(VK_F20);
	VKMAP_INSERT(VK_F21);
	VKMAP_INSERT(VK_F22);
	VKMAP_INSERT(VK_F23);
	VKMAP_INSERT(VK_F24);
	VKMAP_INSERT(VK_NAVIGATION_VIEW);
	VKMAP_INSERT(VK_NAVIGATION_MENU);
	VKMAP_INSERT(VK_NAVIGATION_UP);
	VKMAP_INSERT(VK_NAVIGATION_DOWN);
	VKMAP_INSERT(VK_NAVIGATION_LEFT);
	VKMAP_INSERT(VK_NAVIGATION_RIGHT);
	VKMAP_INSERT(VK_NAVIGATION_ACCEPT);
	VKMAP_INSERT(VK_NAVIGATION_CANCEL);
	VKMAP_INSERT(VK_NUMLOCK);
	VKMAP_INSERT(VK_SCROLL);
	VKMAP_INSERT(VK_OEM_NEC_EQUAL);
	VKMAP_INSERT(VK_OEM_FJ_JISHO);
	VKMAP_INSERT(VK_OEM_FJ_MASSHOU);
	VKMAP_INSERT(VK_OEM_FJ_TOUROKU);
	VKMAP_INSERT(VK_OEM_FJ_LOYA);
	VKMAP_INSERT(VK_OEM_FJ_ROYA);
	VKMAP_INSERT(VK_LSHIFT);
	VKMAP_INSERT(VK_RSHIFT);
	VKMAP_INSERT(VK_LCONTROL);
	VKMAP_INSERT(VK_RCONTROL);
	VKMAP_INSERT(VK_LMENU);
	VKMAP_INSERT(VK_RMENU);
	VKMAP_INSERT(VK_BROWSER_BACK);
	VKMAP_INSERT(VK_BROWSER_FORWARD);
	VKMAP_INSERT(VK_BROWSER_REFRESH);
	VKMAP_INSERT(VK_BROWSER_STOP);
	VKMAP_INSERT(VK_BROWSER_SEARCH);
	VKMAP_INSERT(VK_BROWSER_FAVORITES);
	VKMAP_INSERT(VK_BROWSER_HOME);
	VKMAP_INSERT(VK_VOLUME_MUTE);
	VKMAP_INSERT(VK_VOLUME_DOWN);
	VKMAP_INSERT(VK_VOLUME_UP);
	VKMAP_INSERT(VK_MEDIA_NEXT_TRACK);
	VKMAP_INSERT(VK_MEDIA_PREV_TRACK);
	VKMAP_INSERT(VK_MEDIA_STOP);
	VKMAP_INSERT(VK_MEDIA_PLAY_PAUSE);
	VKMAP_INSERT(VK_LAUNCH_MAIL);
	VKMAP_INSERT(VK_LAUNCH_MEDIA_SELECT);
	VKMAP_INSERT(VK_LAUNCH_APP1);
	VKMAP_INSERT(VK_LAUNCH_APP2);
	VKMAP_INSERT(VK_OEM_1);
	VKMAP_INSERT(VK_OEM_PLUS);
	VKMAP_INSERT(VK_OEM_COMMA);
	VKMAP_INSERT(VK_OEM_MINUS);
	VKMAP_INSERT(VK_OEM_PERIOD);
	VKMAP_INSERT(VK_OEM_2);
	VKMAP_INSERT(VK_OEM_3);
	VKMAP_INSERT(VK_GAMEPAD_A);
	VKMAP_INSERT(VK_GAMEPAD_B);
	VKMAP_INSERT(VK_GAMEPAD_X);
	VKMAP_INSERT(VK_GAMEPAD_Y);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_SHOULDER);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_SHOULDER);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_TRIGGER);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_TRIGGER);
	VKMAP_INSERT(VK_GAMEPAD_DPAD_UP);
	VKMAP_INSERT(VK_GAMEPAD_DPAD_DOWN);
	VKMAP_INSERT(VK_GAMEPAD_DPAD_LEFT);
	VKMAP_INSERT(VK_GAMEPAD_DPAD_RIGHT);
	VKMAP_INSERT(VK_GAMEPAD_MENU);
	VKMAP_INSERT(VK_GAMEPAD_VIEW);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_THUMBSTICK_UP);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_THUMBSTICK_DOWN);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT);
	VKMAP_INSERT(VK_GAMEPAD_LEFT_THUMBSTICK_LEFT);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_THUMBSTICK_UP);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT);
	VKMAP_INSERT(VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT);
	VKMAP_INSERT(VK_OEM_4);
	VKMAP_INSERT(VK_OEM_5);
	VKMAP_INSERT(VK_OEM_6);
	VKMAP_INSERT(VK_OEM_7);
	VKMAP_INSERT(VK_OEM_8);
	VKMAP_INSERT(VK_OEM_AX);
	VKMAP_INSERT(VK_OEM_102);
	VKMAP_INSERT(VK_ICO_HELP);
	VKMAP_INSERT(VK_ICO_00);
	VKMAP_INSERT(VK_PROCESSKEY);
	VKMAP_INSERT(VK_ICO_CLEAR);
	VKMAP_INSERT(VK_PACKET);
	VKMAP_INSERT(VK_OEM_RESET);
	VKMAP_INSERT(VK_OEM_JUMP);
	VKMAP_INSERT(VK_OEM_PA1);
	VKMAP_INSERT(VK_OEM_PA2);
	VKMAP_INSERT(VK_OEM_PA3);
	VKMAP_INSERT(VK_OEM_WSCTRL);
	VKMAP_INSERT(VK_OEM_CUSEL);
	VKMAP_INSERT(VK_OEM_ATTN);
	VKMAP_INSERT(VK_OEM_FINISH);
	VKMAP_INSERT(VK_OEM_COPY);
	VKMAP_INSERT(VK_OEM_AUTO);
	VKMAP_INSERT(VK_OEM_ENLW);
	VKMAP_INSERT(VK_OEM_BACKTAB);
	VKMAP_INSERT(VK_ATTN);
	VKMAP_INSERT(VK_CRSEL);
	VKMAP_INSERT(VK_EXSEL);
	VKMAP_INSERT(VK_EREOF);
	VKMAP_INSERT(VK_PLAY);
	VKMAP_INSERT(VK_ZOOM);
	VKMAP_INSERT(VK_NONAME);
	VKMAP_INSERT(VK_PA1);
	VKMAP_INSERT(VK_OEM_CLEAR);
}

StringToVirtualKeyCode::~StringToVirtualKeyCode()
{
}

::byte StringToVirtualKeyCode::Convert(const std::tstring& str)
{
	if (str.length() == 1) // ASCII
	{
		const TCHAR& firstLetter = str[0];
		if ((firstLetter >= _T('0') && firstLetter <= _T('9')) ||
			(firstLetter >= _T('A') && firstLetter <= _T('Z'))) return (byte)firstLetter;
		else return 0; //unused virtual key (0x39 ~ 0x40)
	}
	else // VK
	{
		vKeyMapIter it = vkMap.find(str);
		if (it != vkMap.end())return vkMap[str];
		else return 0;
	}
}
